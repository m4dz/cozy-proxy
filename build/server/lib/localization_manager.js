// Generated by CoffeeScript 1.9.0
var Instance, Locale, LocalizationManager, Polyglot, supported, supportedLanguages,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Locale = require('locale');

Polyglot = require('node-polyglot');

Instance = require('../models/instance');

supportedLanguages = require('../config').supportedLanguages;

supported = new Locale.Locales(supportedLanguages);

LocalizationManager = (function() {
  LocalizationManager.prototype.polyglot = null;

  function LocalizationManager() {
    this.getLocale = __bind(this.getLocale, this);
    this.t = __bind(this.t, this);
    Instance.getLocale((function(_this) {
      return function(err, locale) {
        if (err) {
          locale = 'en';
        }
        return _this.setLocale(locale);
      };
    })(this));
  }

  LocalizationManager.prototype.setLocale = function(locale) {
    var locales, _ref;
    if (((_ref = this.polyglot) != null ? _ref.locale : void 0) === locale) {
      return;
    }
    locales = new Locale.Locales(locale);
    return this.setPolyglot(locales.best(supported));
  };

  LocalizationManager.prototype.setPolyglot = function(locale) {
    var err, phrases;
    this.requiredLocale = locale;
    try {
      phrases = require("../locales/" + locale);
    } catch (_error) {
      err = _error;
      locale = 'en';
      phrases = require('../locales/en');
    }
    return this.polyglot = new Polyglot({
      locale: locale,
      phrases: phrases
    });
  };

  LocalizationManager.prototype.getPolyglot = function() {
    if (!this.polyglot) {
      this.setPolyglot(this.requiredLocale);
    }
    return this.polyglot;
  };

  LocalizationManager.prototype.t = function(key, params) {
    var _ref;
    if (params == null) {
      params = {};
    }
    return (_ref = this.getPolyglot()) != null ? _ref.t(key, params) : void 0;
  };

  LocalizationManager.prototype.getLocale = function() {
    var _ref;
    return (_ref = this.getPolyglot()) != null ? _ref.locale() : void 0;
  };

  return LocalizationManager;

})();

module.exports = new LocalizationManager();
